// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html (1.182kB)
// schema.gql (2.567kB)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _graphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func graphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_graphiqlHtml,
		"graphiql.html",
	)
}

func graphiqlHtml() (*asset, error) {
	bytes, err := graphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphiql.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x8, 0xb4, 0x3a, 0xe7, 0xdb, 0xc8, 0x3d, 0x2d, 0x1f, 0x1c, 0x2d, 0xd3, 0x9b, 0xf2, 0xd8, 0xe5, 0xd6, 0x5f, 0x3a, 0x7c, 0x6d, 0x80, 0xf7, 0x40, 0xdc, 0x58, 0xf1, 0x75, 0xbd, 0xf0, 0xa1}}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xcd\x6e\xe3\x36\x10\x3e\x4b\x4f\x31\xc1\x5e\x92\x4b\x0e\x45\x4f\x42\x5b\xc0\x49\x5a\x34\x68\x92\x6e\xd7\xd9\xa2\x40\x50\x14\x63\x71\x24\x11\xa6\x48\xed\x70\x64\xc7\x58\xe4\xdd\x0b\x52\xb2\x43\x49\xd9\xbc\xc0\x9e\x2c\xce\x1f\x87\xdf\x7c\xf3\xd9\x97\x0d\xb5\x08\x5f\xf3\xec\x4b\x4f\x7c\x28\x20\xfb\x2b\xfc\xe6\x2f\x79\x2e\x87\x8e\x20\x9e\x82\xfb\x03\x30\x09\x6b\xda\x11\xa0\x31\xb0\x43\xa3\x15\x0a\x29\x40\xef\x49\x3c\x38\x0b\xd2\x10\xac\x85\x8c\x41\x06\x4b\xb2\x77\xbc\xbd\xcc\xb3\xc1\x5f\xc0\xd3\x2a\x7c\x9c\xfd\x7b\x96\xbf\x53\x4c\x7b\xdf\x13\xbf\x53\x6d\x0c\x28\xe0\xe9\x36\x7e\x2d\xea\x09\xa3\x22\xf0\x82\xe2\xa1\x62\xd7\xc6\x3a\x06\xbd\xc0\x4f\xb6\x6f\x7f\x77\x3d\xfb\x55\xed\x7e\x81\x26\x7c\x85\xcc\x73\x45\x15\xf6\x46\xe0\x67\xf8\xe1\xc7\xc1\x7c\x71\x09\xae\x13\xed\x2c\x1a\x73\x80\x8e\xdd\x4e\x2b\x82\xd2\xf5\x56\x88\x01\xad\x0a\x79\x1b\xf4\x34\x3c\x1e\xb4\xad\x1c\x54\x8e\xa1\xd2\x46\x88\xb5\xad\x2f\xf3\xac\x45\xde\x92\xf8\xf3\x3c\xcb\x42\x68\x7c\xfd\xb5\x53\x54\xc0\x5a\x42\x48\x6a\x1f\xde\x92\x78\xc6\xbb\xde\x4a\x4a\x5d\x8b\xbc\xe4\x89\x05\xdc\x5a\xc9\xb3\x8b\x02\x9e\xee\x63\x2b\x0b\xe4\xeb\x9a\xa9\x8e\xb0\x4f\x40\x73\xfc\x0d\xcc\x42\x76\xc4\xe7\x4d\x78\x42\x8e\xc5\x96\xc0\x55\xf1\x7b\xa8\xd9\xa1\x66\x38\xa7\xcb\x80\xc8\x07\xf8\xe7\xee\xfe\xbf\xab\xc7\xeb\x8b\x29\x58\xc0\xe4\x7b\x23\x6f\x97\xdd\x37\x24\x0d\x71\xc8\x76\x0c\xd6\x49\x2c\x1e\xc9\x0a\xa5\x6b\x29\x99\xb2\xa5\x3d\xec\x88\xbd\x76\xf6\xd8\x04\x59\xd5\x39\x6d\x25\xde\x2e\x8d\xf6\x80\x55\x45\xa5\x78\x68\xdc\x7e\xde\xa6\xf6\xa0\x03\xb4\x1d\x93\x90\xba\xcc\x33\xd1\xe5\x96\x38\x4c\x30\xf8\x1f\xb0\xa5\x77\xa1\xce\xb4\x7f\xa0\xfd\xaf\xe3\x95\x05\x5c\x39\x67\x08\xed\x30\x83\xd5\x09\xed\xd3\x34\x5e\xf2\xdc\x97\x18\xf8\x7d\xa5\xeb\x50\x61\x3c\x3d\xea\x96\xc6\xf5\x8b\x53\x0e\xeb\x57\x26\x24\x38\x3b\xae\xc1\xaa\x8c\x64\x48\xec\x21\x29\x39\xda\xbe\x1d\x63\x7c\xec\xf1\x2c\xcf\xb0\x97\xe6\x13\x7d\xe9\x35\x93\x3a\xb5\x78\xb2\xef\x5c\x89\x1b\x43\x13\x47\x3b\xdc\xf1\x9b\x71\x18\x0b\x0c\x9c\xb4\xc2\xce\x18\x52\x57\x87\x1b\xd7\xa2\xb6\x93\x14\x5b\x36\x6e\x49\xde\xa9\xe7\x71\xda\xaa\xf6\xd1\xba\x8a\x01\xd3\xd6\x94\xf6\x9d\xc1\xc3\x0d\x95\xba\x45\xe3\x8b\x11\xae\xf0\xbe\x64\x24\x21\x90\x7c\x99\x1c\x4b\x67\x95\x0e\x84\xf2\x89\xb1\xd2\xcf\xa4\x1e\xfa\x76\x13\xf6\xe6\x54\xa8\xc5\xe7\x85\x4d\xfb\xcf\xd6\xe8\x56\xcb\xb4\x1b\x26\x45\x6d\xe4\xe9\xad\xf5\xc2\x7d\x39\xbf\xa1\x74\xc6\xa0\x10\xa3\x59\x29\xc5\xe4\x3d\xbd\xeb\x5d\xeb\xda\xa2\xf4\x3c\x8b\xea\x6d\x58\xd3\xd4\x16\xd6\xb3\xf7\x0b\x12\xdc\xde\x8c\xa3\x3d\x4a\xf6\xc0\xaf\x40\x9a\xc8\xed\x8f\xa8\x39\x49\x7a\x53\x8b\x52\xfb\x54\x53\x8e\xbd\xbc\xa1\x45\x33\xd7\x22\x2f\x54\xfc\xdb\x99\x3e\x8c\xe8\x48\x9e\x31\x61\x6e\x8e\x8d\x5e\x0f\x3c\x1b\xc0\x77\x1d\xd9\x57\xbf\x71\xfb\xd7\x43\xa3\xeb\x26\xa9\xd8\xa0\xad\xd3\x1b\x8c\xf3\xc9\x31\x2e\xf4\x0e\xcd\x5a\x90\xa5\x88\xab\x15\x49\xc0\x5e\xee\x48\xd5\xc4\xd7\x21\x3e\x98\x4f\xce\x20\x7c\xdf\xf2\x39\x56\xc4\x1b\xe7\xb6\xeb\xa0\x95\x05\xfc\x39\x39\xbf\xce\x60\xbe\xed\xef\x4d\xe3\x7b\xc5\x68\x6a\x87\xaf\x39\x64\x1b\xad\xc6\x17\x9e\xb6\x70\xa3\xd5\x1c\x89\x8d\x56\xf7\xf8\x9c\x2a\xd2\x76\x9e\x85\x7e\x3b\xcf\x42\xbf\xbd\xd7\x09\x5e\xbe\x63\x42\x35\x3f\xdf\x6b\xf5\x71\x50\xef\xd1\x7e\xec\x76\xa0\x77\x98\x63\xd7\x6f\x8c\x2e\xff\xa0\x43\x2a\xb4\x53\x21\xea\xd9\xa4\xa2\xec\x5a\xf3\xf9\xd3\x5d\x2a\x42\xa4\x88\x31\x08\xc7\x9a\x78\x37\xd9\x9a\xa0\xc3\x0b\xa3\x30\x5a\x5f\x11\x2f\x1c\x7b\xda\xac\x7a\x69\x5e\xff\x73\x12\x2d\xec\x9c\xd7\xb2\xc8\x70\x5c\x3f\xee\xb5\x48\x6a\x7c\xc9\xff\x0f\x00\x00\xff\xff\xdd\x12\x6c\x99\x07\x0a\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x7b, 0x4e, 0xde, 0x70, 0x25, 0x9c, 0x4e, 0xec, 0x85, 0x33, 0x4b, 0x6a, 0x36, 0xcd, 0x41, 0x8, 0xc6, 0x8f, 0x3a, 0xe3, 0x6d, 0x42, 0x1d, 0x40, 0xe7, 0xce, 0x33, 0x68, 0x59, 0x77, 0xe1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": graphiqlHtml,
	"schema.gql":    schemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"graphiql.html": &bintree{graphiqlHtml, map[string]*bintree{}},
	"schema.gql":    &bintree{schemaGql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
